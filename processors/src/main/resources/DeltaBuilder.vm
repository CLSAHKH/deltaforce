#set ($class_name = "${model.deltaBuilderClassName}")
package ${model.packageName};

import org.namstorm.deltaforce.core.AbstractDeltaBuilder;
import org.namstorm.deltaforce.core.Delta;
import org.namstorm.deltaforce.core.DeltaMap;
import javax.annotation.Generated;

/**
* Builder for $class_name
*
* @use  ${model.className} $class_name.[from(${model.className} start)]
*               .[set]XXX(value) - for normal values
*           or  .[set|clear]XXX(key, value) - for maps
*           or  .[add|remove]XXX(value) - for sets
*           or  .[setXXXAt(index, value)|removeXXXAt(index)|remove(value)]
*          .[build()|apply()]
*/
@Generated(value="$generatorClassName", date="${date}")
public class $class_name extends AbstractDeltaBuilder<${model.className}> {

    public $class_name($model.className from) {super(from);}

    @Override public $model.className create() { return new ${model.className}(); }

    @Override public $class_name from($model.className from) { super.from(from); return this; }
    @Override public $class_name op(Delta.OP op) { super.op(op); return this; }


#foreach($field in $fields)

    // AccessorType : ${field.accessorType}
    #if( ${field.accessorType} == "field" )
        #set ($alias = "${field.alias}")
    /**
    * Sets the value on the underlying and records a delta (if values are different)
    *
    * @return the property descriptor
    */
    public $class_name set$alias(final $field.type newValue) {
        // first check if we already have a delta of this field
        ${field.boxedType} curValue;

        if(deltaMap().containsKey("${field.name}")) {
            curValue = ($field.boxedType) deltaMap().get("${field.name}").getOldValue();
        }else {
        #if( ${field.primitive} )
            curValue = ${field.boxedType}.valueOf( _from().get$alias() );
        #else
            curValue = _from().get$alias();
        #end
        }

        Delta.OP op = compare(curValue, newValue);

        if(op != Delta.OP.NOOP) addDelta(new Delta(op, "${field.name}", curValue, newValue));

        return this;
    }
    #elseif( ${field.accessorType}=="map" )
        #set ($alias = "${field.alias}")

    public $class_name set$alias(final ${field.key.type} key, final ${field.value.type} value) {

        ${field.value.boxedType} curValue;

        // get existing value
        #if( ${field.primitive} )
        curValue = ${field.boxedType}.valueOf( _from().get}$alias(key) );
        #else
        curValue = _from().get$alias(key);
        #end

        Delta.OP op = compare(curValue, value);

        if(op!=Delta.OP.NOOP) addMapDelta("${field.name}", #if( ${field.accessible} ) _from().${field.name} #else null #end, new Delta(op, key, curValue, value));

        return this;
    }
    #elseif (${field.accessorType}=="collection")

    #end

#end

    /**
    * apply deltas
    * @Override
    * @param to ${model.className} to apply deltas to
    * @return ${model.className} to object with deltas applies
    */
    public ${model.className} apply(${model.className} to) {

        #foreach($field in $fields)
            #set ($alias = "${field.alias}")

            if(deltaMap().containsKey("${field.name}")){
            #if( ${field.accessorType} == "field" )
                to.#if( ${field.accessible} )${field.name} = ((Delta<${field.boxedType}>) deltaMap().get("${field.name}")).getNewValue(); #else set$alias( ((Delta<${field.boxedType}>) deltaMap().get("${field.name}")).getNewValue() );#end

            #elseif (${field.accessorType} == "map")
                #if( ${field.mapItem.substring(0,1)}=="+" )
                    #set( $alias = "${field.name.substring(0,1).toUpperCase()}${field.name.substring(1)}${field.mapItem.substring(1)}" )
                #else
                    #set ($alias = "${field.mapItem.substring(0,1).toUpperCase()}${field.mapItem.substring(1)}" )
                #end

            DeltaMap map = (DeltaMap) deltaMap().get("${field.name}");

                #if( ${field.accessible} )
                    applyToMap(map, to.${field.name});
                #else
                for(${field.key.boxedType} key: map ) {
                    to.set$alias(key, map.get(key));
                }
                #end


            #end
            }
        #end

        return to;

    }

}
