#set ($class_name = "${model.deltaBuilderClassName}")
package ${model.packageName};

import org.namstorm.deltaforce.core.AbstractDeltaBuilder;
import org.namstorm.deltaforce.core.Delta;
import javax.annotation.Generated;

/**
* Builder for $class_name
*
* @use  ${model.className} $class_name.[from(${model.className} start)]
*               .[set]XXX(value) - for normal values
*           or  .[set|clear]XXX(key, value) - for maps
*           or  .[add|remove]XXX(value) - for sets
*           or  .[setXXXAt(index, value)|removeXXXAt(index)|remove(value)]
*          .[build()|apply()]
*/
@Generated(value="$generatorClassName")
public class $class_name extends AbstractDeltaBuilder<${model.className}> {

public $class_name($model.className from) {super(from);}

protected $model.className result() { return ($model.className) super.result(); }

public $class_name from($model.className ${model.className.toLowerCase()}) { return ($class_name) super.from(${model.className.toLowerCase()}); }

#foreach($field in $fields)

    #set ($fnInMethod = "${field.name.substring(0,1).toUpperCase()}${field.name.substring(1)}")
    /**
* Sets the value on the underlying and records a delta (if values are different)
*
* @return the property descriptor
*/
public $class_name set$fnInMethod(final $field.type newValue) {
// first check if we already have a delta of this field
    ${field.boxedType} curValue;

if(deltaMap().containsKey("${field.name}")) {
curValue = ($field.boxedType) deltaMap().get("${field.name}").getOldValue();
}else {
    #if( ${field.primitive} )
    curValue = ${field.boxedType}.valueOf( result().get}$fnInMethod() );
    #else
    curValue = result().get$fnInMethod();
    #end

}

Delta.OP op = compare(curValue, newValue);

if(op!=Delta.OP.NOOP) {
addDelta(new Delta(op, "${field.name}", curValue, newValue));
}
return this;
}
    #end

/**
* apply deltas
* @Override
* @param to ${model.className} to apply deltas to
* @return ${model.className} to object with deltas applies
*/
public ${model.className} apply(${model.className} to) {

#foreach($field in $fields)
    #set ($fnInMethod = "${field.name.substring(0,1).toUpperCase()}${field.name.substring(1)}")

if(deltaMap().containsKey("${field.name}")) to.#if( ${field.accessible} )${field.name} = ((Delta<${field.boxedType}>) deltaMap().get("${field.name}")).getNewValue(); #else set$fnInMethod( ((Delta<${field.boxedType}>) deltaMap().get("${field.name}")).getNewValue() );#end
#end

return to;

    }

}
